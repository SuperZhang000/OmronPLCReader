<Window x:Class="OmronPLCTemperatureReader.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:OmronPLCTemperatureReader"
        xmlns:rule="clr-namespace:OmronPLCTemperatureReader.Common.ValidationRules"
        xmlns:converter="clr-namespace:OmronPLCTemperatureReader.Common.Converters"
        mc:Ignorable="d"
        Title="Omron PLC Temperature Reader" Height="700" Width="1300">


    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="265"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <StackPanel x:Name="stackPanelSettings" Margin="10,10,5,10" Height="649" VerticalAlignment="Top" Grid.Column="0">
            <GroupBox x:Name="groupBoxConnection" Header="Połączenie" Height="auto">
                <Grid>
                    <Label x:Name="labelIP" Content="IP" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Width="28"/>
                    <Label x:Name="labelPort" Content="Port" HorizontalAlignment="Left" Margin="10,38,0,0" VerticalAlignment="Top" Width="44"/>
                    <Label x:Name="connectionStatus" Content="{Binding ConnectionStatus}" HorizontalAlignment="Left" Margin="120,101,0,0" VerticalAlignment="Top" Width="108" Height="27"/>
                    <Button x:Name="connectDisconnect" Content="{Binding ButtonConnectDisconnectContent}" HorizontalAlignment="Left" Margin="10,104,0,0" VerticalAlignment="Top" Width="105" Command="{Binding Path=ConnectDisconect}" Height="24">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="IsEnabled" Value="false" />
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <Setter Property="IsEnabled" Value="true" />
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding ElementName=textBoxIP, Path=(Validation.HasError)}" Value="false" />
                                            <Condition Binding="{Binding ElementName=textBoxPort, Path=(Validation.HasError)}" Value="false" />
                                            <Condition Binding="{Binding ElementName=textBoxInterval, Path=(Validation.HasError)}" Value="false" />
                                        </MultiDataTrigger.Conditions>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <TextBox x:Name="textBoxIP" Height="23" Margin="62,14,10,0" TextWrapping="Wrap" VerticalAlignment="Top" IsEnabled="{Binding CanEditConnectionSetting}" Style="{StaticResource textBoxError}">
                        <TextBox.Text>
                            <Binding Path="Ip" UpdateSourceTrigger="PropertyChanged">
                                <Binding.Converter>
                                    <converter:IPAddressConverter/>
                                </Binding.Converter>
                                <Binding.ValidationRules>
                                    <rule:IPValidation ValidatesOnTargetUpdated="True" ValidationStep="RawProposedValue" ErrorMessage="Adres IP jest niepoprawny"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <TextBox x:Name="textBoxPort" Height="23" Margin="62,42,10,0" TextWrapping="Wrap" VerticalAlignment="Top" IsEnabled="{Binding CanEditConnectionSetting}" Style="{StaticResource textBoxError}">
                        <TextBox.Text>
                            <Binding Path="Port" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <rule:IntegerValidation ValidatesOnTargetUpdated="True" ValidationStep="RawProposedValue" MinValue="1024" MaxValue="65535" ErrorMessage="Numer portu musi być z przedziału od 1024 do 65535"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <Label x:Name="labelInterval" Content="Czas próbkowania [s]" HorizontalAlignment="Left" Margin="10,69,0,0" VerticalAlignment="Top" Width="143"/>
                    <TextBox x:Name="textBoxInterval" Height="23" Margin="153,73,10,0" TextWrapping="Wrap" VerticalAlignment="Top"  IsEnabled="{Binding CanEditConnectionSetting}" Style="{StaticResource textBoxError}">
                        <TextBox.Text>
                            <Binding Path="Interval" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <rule:IntegerValidation ValidatesOnTargetUpdated="True" ValidationStep="RawProposedValue" MinValue="1" MaxValue="600" ErrorMessage="Wartość powinna być z przedziału od 1 do 600"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <!--Accepts tabs Accepts returns-->
                </Grid>
            </GroupBox>
            <!--<GroupBox x:Name="groupBoxPlot" Header="Ustawienia wykresu" Height="70">
                <Grid>
                    
                </Grid>
            </GroupBox>-->
            <GroupBox x:Name="groupBoxSeries" Header="Serie">
                <StackPanel>
                    <DataGrid ItemsSource="{Binding Series}" MaxHeight="385" HeadersVisibility="Column" HorizontalContentAlignment="Stretch" AutoGenerateColumns="False" ColumnWidth="*" CanUserDeleteRows="False" CanUserResizeRows="False" SelectionMode="Single" IsReadOnly="True" Margin="5" SelectedItem="{Binding SelectedItem}">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Nazwa" Binding="{Binding Path=Name}">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Visibility}" Value="false">
                                                <Setter Property="TextDecorations" Value="Strikethrough"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Width="60" Header="Wartość" Binding="{Binding Path=LastValue}">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Visibility}" Value="false">
                                                <Setter Property="TextDecorations" Value="Strikethrough"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <Grid Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Button x:Name="buttonAddSerie" Content="Dodaj" Margin="2" Grid.Column="0" Command="{Binding Path=AddSerie}"/>
                        <Button x:Name="buttonShowHideShowSerie" Content="{Binding ButtonHideShowSerieContent}" Margin="2" Grid.Column="1" Command="{Binding Path=HideShowSerie}" CommandParameter="{Binding Path=SelectedItem}"/>
                        <Button x:Name="buttonEditSerie" Content="Edytuj" Margin="2" Grid.Column="2" Command="{Binding Path=EditSerie}" CommandParameter="{Binding Path=SelectedItem}"/>
                        <Button x:Name="buttonDeleteSerie" Content="Usuń" Margin="2" Grid.Column="3" Command="{Binding Path=DeleteSerie}" CommandParameter="{Binding Path=SelectedItem}"/>
                    </Grid>
                </StackPanel>
            </GroupBox>
        </StackPanel>
        <GridSplitter Width="5" HorizontalAlignment="Stretch" Grid.Column="1"/>
        <TabControl x:Name="tabControl" Margin="5,10,10,10" TabStripPlacement="Bottom" Grid.Column="2">
            <TabItem Header="Wykres">
                <Grid Background="#FFE5E5E5"/>
            </TabItem>
            <TabItem Header="Tabela">
                <Grid Background="#FFE5E5E5">
                    <ListView ItemsSource="{Binding TableView}">
                        <!--Copy feature-->
                        <!--
                        SelectedItem="" 
                        <ListView.InputBindings>
                            <KeyBinding Command="{Binding Copy}" Key="C" Modifiers="Ctrl"/>
                        </ListView.InputBindings>
                        <ListView.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Copy" Command="{Binding Copy}"/>
                            </ContextMenu>
                        </ListView.ContextMenu>-->
                        <ListView.View>
                            <GridView>
                                <GridView.Columns>
                                    <GridViewColumn Width="200" DisplayMemberBinding="{Binding Date, StringFormat='{}{0:dd.MM.yyyy HH:mm:ss}'}" >
                                        <GridViewColumnHeader Content="Czas" Command="{Binding SortTableView}" CommandParameter="Date"/>
                                    </GridViewColumn>
                                    <GridViewColumn Width="300" DisplayMemberBinding="{Binding Serie}">
                                        <GridViewColumnHeader Content="Seria" Command="{Binding SortTableView}" CommandParameter="Serie"/>
                                    </GridViewColumn>
                                    <GridViewColumn Width="300" DisplayMemberBinding="{Binding Value}">
                                        <GridViewColumnHeader Content="Wartość" Command="{Binding SortTableView}" CommandParameter="Value"/>
                                    </GridViewColumn>
                                </GridView.Columns>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>